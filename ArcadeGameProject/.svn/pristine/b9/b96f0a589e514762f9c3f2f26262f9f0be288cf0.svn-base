import java.awt.Color;
import java.awt.Shape;
import java.awt.geom.Point2D;
import java.awt.geom.Point2D.Double;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Random;

public class Enemy implements Entity {

	private ArrayList<int[]> pathway;
	private boolean[][] map;
	private WorldComponent game;
	private Point2D.Double centerPoint;
	private Digger digger;
	private double vx;
	private double vy;
	private boolean isHobblin = false;
	private int size;
	private Pathway path;
	private double speed = 2;

	private int rate = 0;
	private int morphTime = 16000;
	private EnemyCreator parent;

	public Enemy(Point2D.Double pt, WorldComponent game, EnemyCreator parent) {
		this.centerPoint = pt;
		this.game = game;
		this.map = game.getMap().clone();
		this.size = game.getBlockSize();
		this.digger = (Digger) game.getEntities().get(0);
		this.vx = 0;
		this.vy = 0;
		this.parent = parent;

	}

	@Override
	public void timePassed() {
		int[] point = new int[2];
		int row = 0;
		int column = 0;

		touchesEntity();
		this.changeEnemy();
		if ((this.centerPoint.x) % 50 == 25 && (this.centerPoint.y) % 50 == 25) {

			this.path = new Pathway(this.game);

			// converts to coordinates to row/column
			row = (int) (this.centerPoint.getY() / this.size);
			column = (int) (this.centerPoint.getX() / this.size);

			point = this.path.pathFinder(row, column, this.isHobblin);

			if (point[1] * this.size > this.centerPoint.x - 25) {
				this.vx = speed;
				this.vy = 0;
			} else if (point[1] * this.size < this.centerPoint.x - 25) {
				this.vx = -speed;
				this.vy = 0;
			} else if (point[0] * this.size > this.centerPoint.y - 25) {
				this.vy = speed;
				this.vx = 0;
			} else if (point[0] * this.size < this.centerPoint.y - 25) {
				this.vy = -speed;
				this.vx = 0;
			}

		}
		// System.out.println(point[1] + " " + point[0]);

		this.centerPoint.setLocation(this.centerPoint.x + vx,
				this.centerPoint.y + vy);

	}

	public void touchesEntity() {
		for (Entity entity : this.game.getEntities()) {

			// if entity is bullet
			if (entity.getClass().toString().equals("class Bullet")) {
				if (Math.abs(entity.getCenter().getX() - this.centerPoint.x) < this.size / 1.5
						&& Math.abs(entity.getCenter().getY()
								- this.centerPoint.y) < this.size / 1.5) {
					this.game.addPoints(this);
					this.game.addPoints(entity);
					this.parent.babyDied();
				}
			}
			
			if (entity.getClass().toString().equals("class Gold")) {
				if (Math.abs(entity.getCenter().getX() - this.centerPoint.x) < this.size / 1.5
						&& Math.abs(entity.getCenter().getY()
								- this.centerPoint.y) < this.size / 1.5) {
					if(((Gold) entity).getBroken()){
						this.game.getEntitiesToRemove().add(entity);
					}
					if (((Gold) entity).getIsFalling()){
						this.game.addPoints(this);
						this.parent.babyDied();
					}
					
				}
			}

			if (entity.getClass().toString().equals("class Digger")) {
				if (Math.abs(entity.getCenter().getX() - this.centerPoint.x) < this.size/1.8
						&& Math.abs(entity.getCenter().getY()
								- this.centerPoint.y) < this.size/1.8) {
					this.game.diggerDies();
				}
			}

		}

	}

	@Override
	public Shape getShape() {

		double x = this.centerPoint.x;
		double y = this.centerPoint.y;

		Rectangle2D.Double rect = new Rectangle2D.Double(x - this.size / 2, y
				- this.size / 2, this.size, this.size);
		return rect;
	}

	@Override
	public Color getColor() {
		Color[] colors = new Color[4];
		Random random = new Random();

		colors[0] = Color.red;
		colors[1] = Color.blue;
		colors[2] = Color.green;
		colors[3] = Color.yellow;

		if (this.isHobblin) {
			return colors[random.nextInt(4)];
		}

		return Color.red;

	}

	@Override
	public int getPoints() {
		// TODO Auto-generated method stub.
		return 500;
	}

	@Override
	public Double getCenter() {
		return this.centerPoint;
	}
	public EnemyCreator getParent(){
		return this.parent;
	}

	public void changeEnemy() {
		Random random = new Random();
		int num = random.nextInt(this.morphTime);
		if (num < 3) {
			this.isHobblin = true;
		}
		if (num == 3)
			this.isHobblin = false;

	}

}
