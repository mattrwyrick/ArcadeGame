import java.awt.Color;
import java.awt.Shape;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

public class Enemy implements Entity {

	private ArrayList<int[]> pathway;
	private boolean[][] map;
	private WorldComponent game;
	private Point2D.Double centerPoint;
	private Digger digger;
	private double vx;
	private double vy;
	private boolean isHobblin = false;
	private int size;
	private Pathway path;

	private int rate = 0;

	public Enemy(Point2D.Double pt, WorldComponent game) {
		this.centerPoint = pt;
		this.game = game;
		this.map = game.getMap().clone();
		this.size = game.getBlockSize();
		this.digger = (Digger) game.getEntities().get(0);
		this.vx = 0;
		this.vy = 0;

	}

	@Override
	public void timePassed() {
		int[] point = new int[2];
		int row = 0;
		int column = 0;
		
		/* TODO move this into seperate Hobblin/Nobbin functions I guess*/
		if ((this.centerPoint.x) % 50 == 25 && (this.centerPoint.y) % 50 == 25) {
			System.out.println("calls findPath()");
			//System.out.println(this.centerPoint.x % 50);
			this.path = new Pathway(this.game);
			// converts to coordinates to row/column
			row = (int) (this.centerPoint.getY() / this.size);
			column = (int) (this.centerPoint.getX() / this.size);
			//System.out.println("row:" + row + "  column:" + column);
			point = this.path.findPath(row, column);
			System.out.println("point = "+point[0]+" "+point[1]);
			/* now set velocity, then just move */
			// smooth movement (hopefully)
			System.out.println("Enemy row:"+this.centerPoint.y+"  Enemy column:"+this.centerPoint.x);
			System.out.println("Next row: "+point[0]*50+               "  Next column:"+point[1]*50);
			if (point[1] * this.size > this.centerPoint.x-25) {
				System.out.println("right");
				this.vx = 1;
				this.vy = 0;
			} else if (point[1] * this.size < this.centerPoint.x-25) {
				this.vx = -1;
				this.vy = 0;
			} else if (point[0] * this.size > this.centerPoint.y-25) {
				this.vy = 1;
				this.vx = 0;
			} else if (point[0] * this.size < this.centerPoint.y-25) {
				this.vy = -1;
				this.vx = 0;
			}

		}
//		System.out.println(point[1] + " " + point[0]);

		this.centerPoint.setLocation(this.centerPoint.x + vx,
				this.centerPoint.y + vy);

	}

	@Override
	public Shape getShape() {

		double x = this.centerPoint.x;
		double y = this.centerPoint.y;

		Rectangle2D.Double rect = new Rectangle2D.Double(x - this.size / 2, y
				- this.size / 2, this.size, this.size);
		return rect;
	}

	@Override
	public Color getColor() {
		return Color.red;

	}

	@Override
	public int getPoints() {
		// TODO Auto-generated method stub.
		return 0;
	}

}
