import java.awt.geom.Point2D;
import java.util.ArrayList;


public class Pathway {
	
	private ArrayList<int[]> path;
	private boolean[][] map;
	private Point2D.Double enemyCenter;
	private int eRow;
	private int eColumn;
	private WorldComponent game;
	private Digger digger;
	private Point2D.Double diggerCenter;
	private int dRow;
	private int dColumn;
	
	
	/**
	 * Pathway Constructor
	 *
	 * @param game
	 * @param center
	 */
	public Pathway(WorldComponent game, Point2D.Double center){
		this.game = game;
		this.map = new boolean[16][24];
		//makes clone of map to mark pathways
		this.map = game.getMap().clone();
//		for (int i = 0; i < 16; i++)
	//		for (int j = 0; j < 24; j++)
		//		this.map[i][j] = game.getMap()[i][j];
		
		//gets enemy pxl center / row and column
		this.enemyCenter = center;
		this.eRow = (int) (center.y/this.game.getBlockSize());
		this.eColumn = (int) (center.x/this.game.getBlockSize());
		
		//gets digger/ pxl center / row and column
		this.digger = (Digger) this.game.getEntities().get(0);
		this.diggerCenter = this.digger.getCenter();
		this.dRow = (int) (this.diggerCenter.getY()/this.game.getBlockSize());
		this.dColumn= (int) (this.diggerCenter.getX()/this.game.getBlockSize());
		
		
	}
	
	public ArrayList<int[]> getNeighbors(int row, int column){
		//fill initial space with dirt
		this.map[row][column] = false;
		
		ArrayList<int[]> list = new ArrayList<int[]>();
		
		//directly above
		try{
			if(this.map[row-1][column]){
				int[] pt = new int[2];
				pt[0]=row-1;
				pt[1]=column;
				list.add(pt);
				this.map[row-1][column] = false;
			}
		}catch(IndexOutOfBoundsException e){}
		
		//directly below
		try{
			if(this.map[row+1][column]){
				int[] pt = new int[2];
				pt[0]=row+1;
				pt[1]=column;
				list.add(pt);
				this.map[row+1][column] = false;
			}
		}catch(IndexOutOfBoundsException e){}
			
		//directly right
		try{
			if(this.map[row][column+1]){
				int[] pt = new int[2];
				pt[0]=row;
				pt[1]=column+1;
				list.add(pt);
				this.map[row][column+1] = false;
			}
		}catch(IndexOutOfBoundsException e){}
		
		//directly left
		try{
			if(this.map[row][column-1]){
				int[] pt = new int[2];
				pt[0]=row;
				pt[1]=column-1;
				list.add(pt);
				this.map[row][column-1] = false;
			}
		}catch(IndexOutOfBoundsException e){}
		
		return list;
	}
	
	
	/**
	 * call this method outside of Pathway
	 * 
	 * 
	 * this is the primary method
	 * returns first point from shortest pathway.
	 *
	 * @return
	 */
	public int[] findPath(int row, int column){
		
		//gets neighbors from start
		ArrayList<int[]> points = getNeighbors(row,column);
		System.out.println("neighbors at start = "+points.size());
		
		//return if 1 direction initially
		if(points.size()==1){
			return points.get(0);
		}
		
		//check if digger location == neighbor locations
		for(int i=0; i<points.size(); i++){
			if(points.get(i)[0] == this.dRow && points.get(i)[1] == this.dColumn){
				return points.get(i);
				}
			}
		
		//makes pathway(s) for starting neighbors
		for(int j=0; j<points.size();j++){
			if(findPathHelper(points.get(j))){
				return points.get(j);
			}
		}
		return points.get(0);
	}
	
	
	/**
	 * takes in starting point
	 * traces out tunnels
	 * if digger is found returns true;
	 *
	 * @param start
	 * @return
	 */
	public boolean findPathHelper(int[] start){
		
		//get neighbors
		ArrayList<int[]> points = getNeighbors(start[0],start[1]);
		System.out.println("neighbors of neigbors = "+points.size());
		
		//base-case / no neighbors = dead end = false
		if(getNeighbors(start[0],start[1]).size()==0){
			return false;
		}
		
		//check if digger location == neighbor locations
		for(int i=0; i<points.size(); i++){
			if(points.get(i)[0] == this.dRow && points.get(i)[1] == this.dColumn){
				return true;
			}
		}
		
		//recursion - check neighbor points of this point's neighboring ones.
		for(int j=0; j<points.size(); j++){
			if(findPathHelper(points.get(j))){
				return true;
			}
			
		}
		return false;
	
	}
	

}
