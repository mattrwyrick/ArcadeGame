import java.awt.Color;
import java.awt.Shape;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;



public class Enemy implements Entity {
	
	private ArrayList<int[]> pathway;
	private boolean[][] map;
	private WorldComponent game;
	private Point2D.Double centerPoint;
	private Digger digger;
	private double vx;
	private double vy;
	private boolean isHobblin = false;
	private int size;
	private Pathway path;
	
	public Enemy(Point2D.Double pt, WorldComponent game){
		this.centerPoint = pt;
		this.game = game;
		this.map = game.getMap().clone();
		this.size = game.getBlockSize();
		this.digger = (Digger) game.getEntities().get(0);
		this.vx = 0;
		this.vy = 0;
		this.path = new Pathway(this.game, this.centerPoint);
	}


	@Override
	public void timePassed() {
		
		//converts to coordinates to row/column
		int row = (int) (this.centerPoint.getY()/this.size);
		int column = (int) (this.centerPoint.getX()/this.size);
		
		//returns next row and column not pixel
		int[] point = this.path.findPath(row,column);
		System.out.println(point);
		
		//smooth movement (hopefully)
		if (point[1]*this.size<this.centerPoint.x){
			vx = -1;
			vy = 0;
		}
		if (point[1]*this.size>this.centerPoint.x){
			vx = 1;
			vy = 0;
		}
		if (point[0]*this.size<this.centerPoint.y){
			vy = -1;
			vx = 0;
		}
		if (point[0]*this.size>this.centerPoint.y){
			vy=1;
			vx=0;
		}
		
		this.centerPoint.setLocation(this.centerPoint.x+vx,this.centerPoint.y+vy);
	
		
	}


	@Override
	public Shape getShape() {
		
		double x = this.centerPoint.x;
		double y = this.centerPoint.y;
		
		Rectangle2D.Double rect = new Rectangle2D.Double(
				x,y,this.size,this.size);
		return rect;
	}


	@Override
	public Color getColor() {
		return Color.red;
		
		
	}


	@Override
	public int getPoints() {
		// TODO Auto-generated method stub.
		return 0;
	}
	


}
